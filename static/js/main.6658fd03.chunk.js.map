{"version":3,"sources":["Component/TasksList/TasksList.js","Component/AddTasks/AddTask.js","Component/Background/bg.js","App.js","serviceWorker.js","index.js"],"names":["TasksList","props","TasksProps","handleDelete","tasksArr","map","task","id","key","type","name","taskDescription","value","for","className","onClick","duration","easing","AddTasks","state","handleChange","e","setState","target","handleSubmit","preventDefault","handleAdd","onSubmit","this","placeholder","onChange","Component","Bg","App","tasks","filter","Math","random","console","log","push","AddTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6658fd03.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TasksList.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst TasksList = (props) => {\r\n    const {TasksProps , handleDelete}=props\r\n    const tasksArr= TasksProps.map(task => {\r\n        return(\r\n            <div id=\"checklist\" key={task.id}>\r\n            <div>\r\n            <input id={task.id} type=\"checkbox\" name={task.taskDescription} value={task.taskDescription} /> \r\n                    <label for={task.id}>{task.taskDescription}</label>\r\n            </div>\r\n            <div className=\"multi-button\">\r\n            <button className=\"cut\" onClick={()=>{handleDelete(task.id)}}>delete</button>\r\n            </div>\r\n          \r\n      </div>\r\n        )\r\n    })\r\n    // let len= TasksProps.length;\r\n    // const noEmployees= len<=0?   <p> No tasks to show </p>:null\r\n\r\n    return(\r\n        <div >\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n            {tasksArr}    \r\n\r\n            </FlipMove>\r\n\r\n            {/* {noEmployees}   */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TasksList","import React ,{Component, Fragment} from 'react';\r\nimport './AddTasks.css';\r\n\r\nclass AddTasks extends Component{\r\n\r\n    state={\r\n         taskDescription:''\r\n        }\r\n    \r\n    handleChange =(e)=>{\r\n        this.setState(\r\n            {\r\n                [e.target.id]:e.target.value,\r\n                \r\n            }\r\n            )\r\n    }\r\n    \r\n    handleSubmit =(e)=>\r\n    {\r\n        e.preventDefault();\r\n        this.props.handleAdd(this.state)\r\n        this.setState(\r\n            {\r\n                taskDescription:''\r\n            }\r\n                )\r\n    }\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <form onSubmit={this.handleSubmit} >\r\n                    <h1>Tasks \r\n                        <i className=\"fa fa-plus\">\r\n                        <span  type=\"submit\" className=\"button\" onClick={this.handleSubmit} >Add</span>\r\n                        </i>\r\n                    </h1> \r\n                    <input type=\"text\" id=\"taskDescription\" placeholder=\"Add New Task\" onChange={this.handleChange} value={this.state.taskDescription}/>\r\n                </form>\r\n\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTasks","import React ,{Fragment} from 'react';\r\nimport './bg.css';\r\n\r\nconst Bg=()=>{\r\n    return(\r\n        <Fragment>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n                <div className=\"particle\"></div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Bg","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport TasksList from './Component/TasksList/TasksList';\nimport AddTasks from './Component/AddTasks/AddTask';\nimport Bg from './Component/Background/bg';\n\nclass App extends Component {\n  state={\n    task:[\n            {id: 1,\n            taskDescription:\"CreateDashBoard\"},\n            {id: 2,\n            taskDescription:\"ModifyDashBoard\"}\n          ]\n       }\n\n\n  handleDelete =(id)=>{\n    let tasks= this.state.task.filter(task=> task.id!==id);\n    this.setState( { task:tasks})\n  \n  } \n  handleAdd =(task)=>{\n    let tasks= this.state.task;\n\n    task.id=Math.random()*100;\n    console.log(task)\n    tasks.push(task);\n    this.setState( { task:tasks})\n  \n  }\n\n  render(){\n\n    return (\n      <Fragment id=\"particle-container\">\n        <Bg/>\n        <AddTasks TasksProps={this.state.task} handleAdd={this.handleAdd}/>\n        <TasksList TasksProps={this.state.task} handleDelete={this.handleDelete}/>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}